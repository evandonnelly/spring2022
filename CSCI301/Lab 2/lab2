#lang racket


; QUESTION 4
; define function
(define (gen-list start end)
  (if (> start end)
      ; base case  (if pair is adjacent numbers)
      empty
      ; recursive case  (if pair is one or more numbers appart)
      (cons start (gen-list (+ start 1) end))))

; QUESTION 5
; define function
(define (sum list)
  (if (empty? list)
      ; base case
      0
      ; recursive case -- add first item in current list to rest of list
      (+ (car list) (sum (cdr list)))))

; QUESTION 6
; define function